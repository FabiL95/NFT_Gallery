// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NFT_Gallery.Data;

#nullable disable

namespace NFT_Gallery.Migrations
{
    [DbContext(typeof(NFTGalleryDBContext))]
    [Migration("20240804160922_initial migration")]
    partial class initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NFT_Gallery.Models.NFT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("NFTs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageURL = "SAC1.png",
                            Name = "Stoned Ape #",
                            Price = 2.0
                        });
                });

            modelBuilder.Entity("NFT_Gallery.Models.NFTProject", b =>
                {
                    b.Property<int>("NFTId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("NFTId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("NFTProjects");

                    b.HasData(
                        new
                        {
                            NFTId = 1,
                            ProjectId = 1
                        });
                });

            modelBuilder.Entity("NFT_Gallery.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarketplaceURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Blablabla",
                            MarketplaceURL = "https://www.tensor.trade/trade/stoned_ape_crew",
                            Name = "Stoned Ape Crew",
                            WebsiteURL = "https://www.stonedapecrew.com/"
                        });
                });

            modelBuilder.Entity("NFT_Gallery.Models.NFTProject", b =>
                {
                    b.HasOne("NFT_Gallery.Models.NFT", "NFT")
                        .WithMany("NFTProjects")
                        .HasForeignKey("NFTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NFT_Gallery.Models.Project", "Project")
                        .WithMany("NFTProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NFT");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("NFT_Gallery.Models.NFT", b =>
                {
                    b.Navigation("NFTProjects");
                });

            modelBuilder.Entity("NFT_Gallery.Models.Project", b =>
                {
                    b.Navigation("NFTProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
